document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('credit-form');
    const resultContainer = document.getElementById('result');
    const backButton = document.getElementById('back-btn');
    const scoreValue = document.querySelector('.score-value');
    const scoreText = document.querySelector('.score-text');
    const resultMessage = document.querySelector('.result-message');
    const mortgageCalc = document.getElementById('mortgage-calc');
    
    // Automatically calculate mortgage values and update form fields
    function calculateAndUpdateFormFields() {
        // Read inputs from mortgage calculator
        const propertyPrice = Number(document.getElementById('property_price').value);
        const downPayment = Number(document.getElementById('down_payment').value);
        const years = Number(document.getElementById('mortgage_years').value);
        const annualRate = Number(document.getElementById('interest_rate').value);
        const monthlyIncomeVal = Number(document.getElementById('monthly_income_calc').value);

        // Calculate loan values
        const monthlyRate = annualRate / 12 / 100;
        const months = years * 12;
        const loanAmount = propertyPrice - downPayment;
        
        // Only calculate if values are valid
        if (propertyPrice > 0 && monthlyRate > 0 && months > 0) {
            const monthlyPayment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, months))
                / (Math.pow(1 + monthlyRate, months) - 1);
            const annuityRatioCalc = monthlyIncomeVal > 0 ? monthlyPayment / monthlyIncomeVal : 0;
            
            // Update form fields with calculator values
            document.getElementById('AMT_CREDIT').value = loanAmount;
            document.getElementById('AMT_CREDIT_display').textContent = Math.round(loanAmount).toLocaleString('ru-RU');
            
            document.getElementById('AMT_INCOME_TOTAL').value = monthlyIncomeVal;
            document.getElementById('AMT_INCOME_TOTAL_display').textContent = Math.round(monthlyIncomeVal).toLocaleString('ru-RU');
            
            document.getElementById('AMT_ANNUITY').value = Math.round(monthlyPayment);
            document.getElementById('AMT_ANNUITY_display').textContent = Math.round(monthlyPayment).toLocaleString('ru-RU');
            
            document.getElementById('LOAN_DURATION').value = months;
            document.getElementById('ANNUITY_INCOME_RATIO').value = annuityRatioCalc.toFixed(2);
            
            // Update mortgage result display
            document.getElementById('monthly_payment_display').textContent = Math.round(monthlyPayment).toLocaleString('ru-RU');
            const overpayment = monthlyPayment * months - loanAmount;
            document.getElementById('overpayment_display').textContent = Math.round(overpayment).toLocaleString('ru-RU');
            document.getElementById('annuity_ratio_display').textContent = annuityRatioCalc.toFixed(2);
            
            // Show mortgage calculation result
            document.getElementById('mortgage_result').classList.remove('hidden');
        }
    }
    
    // Add event listeners to calculator inputs to auto-update form
    const calcInputs = ['property_price', 'down_payment', 'mortgage_years', 'interest_rate', 'monthly_income_calc'];
    calcInputs.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', function() {
                calculateAndUpdateFormFields();
            });
        }
    });
    
    // Initial calculation on page load
    calculateAndUpdateFormFields();
    
    // Calculate button now just focuses on the form's submit button
    document.getElementById('calc_mortgage_btn').addEventListener('click', function() {
        calculateAndUpdateFormFields();
        // Optionally scroll to the form submit button
        const submitBtn = form.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.scrollIntoView({behavior: 'smooth'});
        }
    });
    
    // Handle form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Ensure latest calculator values are used
        calculateAndUpdateFormFields();
        
        // Validate form
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.textContent;
        submitButton.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        submitButton.disabled = true;
        
        // Get form data
        const formData = new FormData(form);
        
        // Send form data to server
        fetch('/predict', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errData => {
                    throw new Error(errData.details || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                });
            }
            return response.json();
        })
        .then(data => {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
            
            const approvalChance = data.approval_chance;
            const creditScore = data.credit_score || 0;
            const recommendations = data.recommendations || "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π";
            
            scoreValue.style.width = `${approvalChance}%`;
            scoreText.textContent = `${approvalChance}%`;
            
            // Build structured result HTML
            // Determine status message
            let imagePath = '';
            let statusMsg = '';
            if (approvalChance >= 80) {
                imagePath = '/static/img/like.png';
                statusMsg = '–í—ã—Å–æ–∫–∏–π —à–∞–Ω—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞!';
            } else if (approvalChance >= 50) {
                imagePath = '/static/img/neutral.png';
                statusMsg = '–°—Ä–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏.';
            } else {
                imagePath = '/static/img/dislike.png';
                statusMsg = '–ù–∏–∑–∫–∏–π —à–∞–Ω—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è.';
            }         

            // Fetch calculation results
            const monthlyPayment = document.getElementById('monthly_payment_display').textContent;
            const overpayment = document.getElementById('overpayment_display').textContent;
            const annuityRatio = document.getElementById('annuity_ratio_display').textContent;
            const ratioVal = parseFloat(document.getElementById('ANNUITY_INCOME_RATIO').value) || 0;
            let ratioRecText = '';
            if (ratioVal < 0.3) ratioRecText = '–ö—Ä–µ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω: –ø–ª–∞—Ç–µ–∂–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –º–µ–Ω–µ–µ 30% –æ—Ç –¥–æ—Ö–æ–¥–∞.';
            else if (ratioVal < 0.4) ratioRecText = '–ö—Ä–µ–¥–∏—Ç –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –Ω–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞.';
            else ratioRecText = '–ö—Ä–µ–¥–∏—Ç —Å–ª–∏—à–∫–æ–º –æ–±—Ä–µ–º–µ–Ω–∏—Ç–µ–ª–µ–Ω: –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç 40% –æ—Ç –¥–æ—Ö–æ–¥–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –∑–∞–π–º –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ —Å—Ä–æ–∫.';

            let resultHTML = `
                <div class="status-message-with-image vertical">
                    <span class="status-text">${statusMsg}</span>
                </div>
                <div class="result-details">
                    <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ <span class="emoji">üìä</span></h3>
                <ul>
                    <li>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥: <strong>${creditScore}</strong> (300‚Äì1000)</li>
                    <li>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: <strong>${monthlyPayment} ‚Ç∏</strong></li>
                    <li>–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: <strong>${overpayment} ‚Ç∏</strong></li>
                    <li>–î–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞ –∫ –¥–æ—Ö–æ–¥—É: <strong>${annuityRatio}</strong></li>
                    <li>${ratioRecText}</li>
                </ul>
            </div>
            `;
            
            // Add mortgage recommendations
            if (recommendations && recommendations !== "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–ø–æ—Ç–µ–∫") {
                resultHTML += `
                    <div class="mortgage-products">
                    <h3>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–ø–æ—Ç–µ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã <span class="emoji">üè†</span></h3>
                        <pre>${recommendations}</pre>
                    </div>`;
            }
            
            // Add ChatGPT recommendation
            if (data.gpt_recommendation) {
                resultHTML += `
                    <div class="chatgpt-recommendation">
                    <h3>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ <span class="emoji">ü§ñ</span></h3>
                        <p>${data.gpt_recommendation}</p>
                    </div>`;
            }
        
            resultMessage.innerHTML = resultHTML;
            
            // Hide both form and calculator when showing results
            form.classList.add('hidden');
            mortgageCalc.classList.add('hidden');
            resultContainer.classList.remove('hidden');
        })
        .catch(error => {
            submitButton.textContent = originalButtonText;
            submitButton.disabled = false;
            
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message);
        });
    });
    
    backButton.addEventListener('click', function() {
        resultContainer.classList.add('hidden');
        form.classList.remove('hidden');
        mortgageCalc.classList.remove('hidden'); // Show calculator again when going back
    });
    
    const childrenInput = document.getElementById('CNT_CHILDREN');
    const familyInput = document.getElementById('CNT_FAM_MEMBERS');
    
    [childrenInput, familyInput].forEach(input => {
        input.addEventListener('input', function() {
            const children = parseInt(childrenInput.value) || 0;
            const family = parseInt(familyInput.value) || 0;
            
            if (children > 0 && family > 0 && children > family) {
                familyInput.setCustomValidity('–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ—Ç–µ–π');
            } else {
                familyInput.setCustomValidity('');
            }
        });
    });
    
    // Initialize slider displays
    document.querySelectorAll('.slider-group input[type="range"]').forEach(slider => {
        const display = document.getElementById(`${slider.id}_display`);
        if (display) {
            display.textContent = Number(slider.value).toLocaleString('ru-RU');
        }
        slider.addEventListener('input', () => {
            if (display) {
                display.textContent = Number(slider.value).toLocaleString('ru-RU');
            }
        });
    });

    // Mortgage calculator sliders initialization
    const mortgageSliders = ['property_price', 'down_payment', 'interest_rate', 'monthly_income_calc'];
    mortgageSliders.forEach(id => {
        const slider = document.getElementById(id);
        const display = document.getElementById(`${id}_display`);
        if (slider && display) {
            display.textContent = Number(slider.value).toLocaleString('ru-RU');
            slider.addEventListener('input', () => {
                display.textContent = Number(slider.value).toLocaleString('ru-RU');
            });
        }
    });
}); 